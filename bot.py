import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from random import choice

# üîë –¢–æ–∫–µ–Ω
BOT_TOKEN = "8073634244:AAE_AZ8Ib14OkcLixU3ve0Mx0hXVACQBp7w"

# üìÅ –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É
DATA_FILE = "user_data.json"

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

# üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = load_data()

# üì∏ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
motivations = [
    "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üí™",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–ø–∏—Ç—å ‚Äî —Ü–µ–ª—å —Ä—è–¥–æ–º! üí∞",
    "–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫(–∞), –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! üî•",
    "–û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –º–µ—á—Ç–µ üìà"
]

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –≤–∏–¥–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="setgoal")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É", callback_data="add")],
        [InlineKeyboardButton(text="–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_input")]
])

# üìÇ –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    goal = State()
    add_amount = State()
    withdraw = State()

# üí¨ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"goal": 0, "balance": 0}
        save_data()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
async def main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "setgoal":
        await state.clear()
        await callback.message.edit_text("üí° –í–≤–µ–¥–∏ —Å—É–º–º—É —Ç–≤–æ–µ–π —Ü–µ–ª–∏:", reply_markup=cancel_kb)
        await state.set_state(Form.goal)
    elif data == "add":
        await state.clear()
        await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞–∫–æ–ø–∏–ª:", reply_markup=cancel_kb)
        await state.set_state(Form.add_amount)
    elif data == "withdraw":
        await state.clear()
        await callback.message.edit_text("üí∏ –í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–Ω—è—Ç—å:", reply_markup=cancel_kb)
        await state.set_state(Form.withdraw)
    elif data == "progress":
        user_id = str(callback.from_user.id)
        goal = user_data[user_id].get("goal", 0)
        balance = user_data[user_id].get("balance", 0)
        if goal == 0:
            text = "‚õî –¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å'."
        else:
            percent = round((balance / goal) * 100, 2)
            text = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {balance} / {goal} —Ç–≥ ({percent}%)"
        await callback.message.edit_text(text, reply_markup=get_main_menu())
    elif data in ("cancel", "cancel_input"):
        await state.clear()
        await callback.message.edit_text("–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback‚Äë—Ö—ç–Ω–¥–ª–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
dp.callback_query.register(main_menu_callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏
@dp.message(Form.goal)
async def process_goal_input(message: Message, state: FSMContext):
    try:
        goal_text = message.text.replace(",", ".").strip()
        goal = float(goal_text)
        if goal <= 0:
            await message.answer("‚ùó –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_kb)
            return
        user_id = str(message.from_user.id)
        user_data[user_id]["goal"] = goal
        save_data()
        await message.answer(f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal} —Ç–≥", reply_markup=get_main_menu())
        await send_motivation(message)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000).", reply_markup=cancel_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã
@dp.message(Form.add_amount)
async def process_add_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_id = str(message.from_user.id)
        user_data[user_id]["balance"] += amount
        save_data()
        await message.answer(f"üí∏ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} —Ç–≥", reply_markup=get_main_menu())
        await send_motivation(message)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!", reply_markup=cancel_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤
@dp.message(Form.withdraw)
async def process_withdraw_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_id = str(message.from_user.id)
        current_balance = user_data[user_id]["balance"]
        if amount <= 0:
            await message.answer("‚ùó –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_kb)
            return
        if amount > current_balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.", reply_markup=cancel_kb)
            return
        user_data[user_id]["balance"] = current_balance - amount
        save_data()
        await message.answer(
            f"üí∏ –°–Ω—è—Ç–æ: {amount} —Ç–≥. –û—Å—Ç–∞—Ç–æ–∫: {user_data[user_id]['balance']} —Ç–≥.",
            reply_markup=get_main_menu()
        )
        await send_motivation(message)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.", reply_markup=cancel_kb)

# üî• –ú–æ—Ç–∏–≤–∞—à–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_motivation(message: Message):
    await message.answer(choice(motivations))

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
